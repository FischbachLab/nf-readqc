manifest {
  name = 'nf-readqc'
  author = 'Sunit Jain'
  homePage = 'https://github.com/fischbachlab/nf-readqc'
  description = 'Yet Another Metagenomic Pipeline - QC portion only'
  mainScript = 'main.nf'
  defaultBranch = 'main'
  version = '1.0.0'
}

includeConfig "$baseDir/conf/aws_batch.config"

params {

   /* 	Containers
	--------------------------------*/
	docker_container_bbmap = "quay.io/biocontainers/bbmap:38.87--h1296035_0"
	docker_container_fastqc = "quay.io/biocontainers/fastqc:0.11.9--0"
	docker_container_multiqc = "quay.io/biocontainers/multiqc:1.9--py_1"

	/* 	Initialisation
	--------------------------------*/

	//These are used when the analysis is in characterisation mode
	reads = ""
	seedfile = false

	//These are used to print version and help
	help = null
	version = null

	multiqc_config="$baseDir/conf/multiqc_config.yaml"

		
  /* 	Execution flow parameters
    --------------------------------*/		

  singleEnd = false  //Whether we the input reads are single or paired-end 
	dedup = false	//Whether the de-duplication step should be performed
		
	outdir = "s3://genomics-workflow-core/Results/ReadQC"
  project = "00_TEST"
  prefix = null
  
	/* 	Available databases
  --------------------------------*/		
				
  /* 	Processing parameters
  --------------------------------*/
   
  // BBduk parameters for trimming	
  qin=33 //Input quality offset: 33 (ASCII+33) or 64 (ASCII+64)
  kcontaminants = 23 //Kmer length used for finding contaminants	
  phred = 10 //regions with average quality BELOW this will be trimmed 
  minlength = 60 //reads shorter than this after trimming will be discarded
  mink = 11 //shorter kmers at read tips to look for 
  hdist = 1  //maximum Hamming distance for ref kmers            

  // BBwrap parameters for decontamination	
  mind = 0.95 //Approximate minimum alignment identity to look for
  maxindel = 3 //longest indel to look for
  bwr=0.16 //restrict alignment band to this
  
  // Resources provided with the pipeline
  artefacts = "$baseDir/assets/data/sequencing_artifacts.fa.gz"
  phix174ill = "$baseDir/assets/data/phix174_ill.ref.fa.gz"
  adapters = "$baseDir/assets/data/adapters.fa"

  //Reference pan-genome for contamination
  foreign_genome = "/mnt/efs/databases/contaminants/hg19_main_mask_ribo_animal_allplant_allfungus.fa.gz" //To be used when the reference genome has not been indexed yet
  foreign_genome_ref = "" //To be used when the reference genome has already been indexed
}

process 
{
	maxRetries = 5
	executor = 'awsbatch'
	queue = 'default-maf-pipelines'
	cleanup = true
	cache = false

  withName: concatenate
	{
		time =  '5h'
		cpus = 4
		memory = '8 GB'	
		errorStrategy = 'retry'
	}

  withName: quality_assessment
	{
		time =  '2h'
		cpus = 4
		memory = '8 GB'	 
		errorStrategy = 'retry'
	}
	
	withName: dedup
	{
		time =  '2h'
		cpus = 4
		memory = '32 GB'  
		errorStrategy = 'retry'
	}	
	
	withName: remove_synthetic_contaminants 
	{
		time =  '2h'
		cpus = 4
		memory = '32 GB' 
		errorStrategy = 'retry'
	}	
	
	withName: trim 
	{
		time =  '2h'
		cpus = 4
		memory = '32 GB' 
		errorStrategy = 'retry'
	}	
	
	withName: index_foreign_genome 
	{
		time =  '4h'
		cpus = 4
		memory = '32 GB'  
		errorStrategy = 'retry'
	}
	
	withName: decontaminate 
	{
		time =  '4h'
		cpus = 4
		memory = '32 GB'  
		errorStrategy = 'retry'
	}
	
	withName: log
	{
		time =  '30m'
		cpus = 2
		memory = '8 GB'  
		errorStrategy = 'ignore'
	}
}

trace {
    enabled = false
    fields = 'task_id, name, status, exit, module, submit, start, complete, duration, realtime, %cpu, rss, vmem, peak_rss, peak_vmem'
}

report {
  enabled = false
  overwrite = true
  file = "$params.outdir/$params.project/01_execution_report/report.html"
}

timeline {
  enabled = false
  overwrite = true
  file = "$params.outdir/$params.project/01_execution_report/timeline.html"
}

dag {
  enabled = false
  overwrite = true
  file = "$params.outdir/$params.project/01_execution_report/dag.html"
}
